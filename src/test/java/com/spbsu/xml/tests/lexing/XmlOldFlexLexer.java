package com.spbsu.xml.tests.lexing;

import com.spbsu.xml.impl.lexer.XmlTokenType;


/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 10.05.06 19:57 from the specification file
 * <tt>XmlFlexLexer.flex</tt>
 */
public class XmlOldFlexLexer {
 /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 256;

 /** lexical states */
  public static final int PROCESSING_INSTRUCTION = 2;
  public static final int ATTR_LIST = 5;
  public static final int END_TAG = 3;
  public static final int ATTR_VALUE_DQ = 8;
  public static final int DTD_MARKUP = 7;
  public static final int CDATA = 11;
  public static final int ATTR = 6;
  public static final int TAG = 1;
  public static final int YYINITIAL = 0;
  public static final int ATTR_VALUE_START = 7;
  public static final int COMMENT = 4;
  public static final int DOCTYPE = 10;
  public static final int ATTR_VALUE_SQ = 9;

  /**
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED =
    "\11\0\2\3\1\0\2\3\22\0\1\3\1\10\1\50\1\35\1\52"+
    "\1\0\1\20\1\47\5\0\1\5\1\4\1\45\12\2\1\6\1\23"+
    "\1\7\1\46\1\17\1\44\1\0\1\14\1\37\1\12\1\13\1\43"+
    "\1\37\10\1\1\40\1\42\3\1\1\15\4\1\1\41\1\1\1\11"+
    "\1\51\1\16\1\0\1\1\1\0\1\24\1\33\4\37\1\21\4\1"+
    "\1\21\1\34\1\32\1\26\1\25\1\30\1\1\1\27\1\22\1\31"+
    "\2\1\1\36\2\1\57\0\1\1\12\0\1\1\4\0\1\1\5\0";
//    "\27\1\1\0\37\1\1\0\u013f\1\31\0\162\1\4\0\14\1\16\0"+
//    "\5\1\11\0\1\1\213\0\1\1\13\0\1\1\1\0\3\1\1\0"+
//    "\1\1\1\0\24\1\1\0\54\1\1\0\46\1\1\0\5\1\4\0"+
//    "\202\1\10\0\105\1\1\0\46\1\2\0\2\1\6\0\20\1\41\0"+
//    "\46\1\2\0\1\1\7\0\47\1\110\0\33\1\5\0\3\1\56\0"+
//    "\32\1\5\0\13\1\43\0\2\1\1\0\143\1\1\0\1\1\17\0";
//    "\2\1\7\0\2\1\12\0\3\1\2\0\1\1\20\0\1\1\1\0"+
//    "\36\1\35\0\3\1\60\0\46\1\13\0\1\1\u0152\0\66\1\3\0"+
//    "\1\1\22\0\1\1\7\0\12\1\43\0\10\1\2\0\2\1\2\0"+
//    "\26\1\1\0\7\1\1\0\1\1\3\0\4\1\3\0\1\1\36\0"+
//    "\2\1\1\0\3\1\16\0\2\1\23\0\6\1\4\0\2\1\2\0"+
//    "\26\1\1\0\7\1\1\0\2\1\1\0\2\1\1\0\2\1\37\0"+
//    "\4\1\1\0\1\1\23\0\3\1\20\0\11\1\1\0\3\1\1\0"+
//    "\26\1\1\0\7\1\1\0\2\1\1\0\5\1\3\0\1\1\22\0"+
//    "\1\1\17\0\2\1\43\0\10\1\2\0\2\1\2\0\26\1\1\0"+
//    "\7\1\1\0\2\1\1\0\5\1\3\0\1\1\36\0\2\1\1\0"+
//    "\3\1\17\0\1\1\21\0\1\1\1\0\6\1\3\0\3\1\1\0"+
//    "\4\1\3\0\2\1\1\0\1\1\1\0\2\1\3\0\2\1\3\0"+
//    "\3\1\3\0\10\1\1\0\3\1\113\0\10\1\1\0\3\1\1\0"+
//    "\27\1\1\0\12\1\1\0\5\1\46\0\2\1\43\0\10\1\1\0"+
//    "\3\1\1\0\27\1\1\0\12\1\1\0\5\1\3\0\1\1\40\0"+
//    "\1\1\1\0\2\1\43\0\10\1\1\0\3\1\1\0\27\1\1\0"+
//    "\20\1\46\0\2\1\43\0\22\1\3\0\30\1\1\0\11\1\1\0"+
//    "\1\1\2\0\7\1\72\0\60\1\1\0\2\1\14\0\7\1\72\0"+
//    "\2\1\1\0\1\1\2\0\2\1\1\0\1\1\2\0\1\1\6\0"+
//    "\4\1\1\0\7\1\1\0\3\1\1\0\1\1\1\0\1\1\2\0"+
//    "\2\1\1\0\4\1\1\0\2\1\11\0\1\1\2\0\5\1\1\0"+
//    "\1\1\25\0\2\1\42\0\1\1\77\0\10\1\1\0\42\1\35\0"+
//    "\4\1\164\0\42\1\1\0\5\1\1\0\2\1\45\0\6\1\112\0"+
//    "\46\1\12\0\51\1\7\0\132\1\5\0\104\1\5\0\122\1\6\0"+
//    "\7\1\1\0\77\1\1\0\1\1\1\0\4\1\2\0\7\1\1\0"+
//    "\1\1\1\0\4\1\2\0\47\1\1\0\1\1\1\0\4\1\2\0"+
//    "\37\1\1\0\1\1\1\0\4\1\2\0\7\1\1\0\1\1\1\0"+
//    "\4\1\2\0\7\1\1\0\7\1\1\0\27\1\1\0\37\1\1\0"+
//    "\1\1\1\0\4\1\2\0\7\1\1\0\47\1\1\0\23\1\105\0"+
//    "\125\1\14\0\u026c\1\2\0\10\1\12\0\32\1\5\0\113\1\25\0"+
//    "\15\1\1\0\4\1\16\0\22\1\16\0\22\1\16\0\15\1\1\0"+
//    "\3\1\17\0\64\1\43\0\1\1\4\0\1\1\103\0\130\1\10\0"+
//    "\51\1\127\0\35\1\63\0\36\1\2\0\5\1\u038b\0\154\1\224\0"+
//    "\234\1\4\0\132\1\6\0\26\1\2\0\6\1\2\0\46\1\2\0"+
//    "\6\1\2\0\10\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
//    "\37\1\2\0\65\1\1\0\7\1\1\0\1\1\3\0\3\1\1\0"+
//    "\7\1\3\0\4\1\2\0\6\1\4\0\15\1\5\0\3\1\1\0"+
//    "\7\1\164\0\1\1\15\0\1\1\202\0\1\1\4\0\1\1\2\0"+
//    "\12\1\1\0\1\1\3\0\5\1\6\0\1\1\1\0\1\1\1\0"+
//    "\1\1\1\0\4\1\1\0\3\1\1\0\7\1\3\0\3\1\5\0"+
//    "\5\1\u0ebb\0\2\1\52\0\5\1\5\0\2\1\4\0\126\1\6\0"+
//    "\3\1\1\0\132\1\1\0\4\1\5\0\50\1\4\0\136\1\21\0"+
//    "\30\1\70\0\20\1\u0200\0\u19b6\1\112\0\u51a6\1\132\0\u048d\1\u0773\0"+
//    "\u2ba4\1\u215c\0\u012e\1\2\0\73\1\225\0\7\1\14\0\5\1\5\0"+
//    "\1\1\1\0\12\1\1\0\15\1\1\0\5\1\1\0\1\1\1\0"+
//    "\2\1\1\0\2\1\1\0\154\1\41\0\u016b\1\22\0\100\1\2\0"+
//    "\66\1\50\0\14\1\164\0\5\1\1\0\207\1\44\0\32\1\6\0"+
//    "\32\1\13\0\131\1\3\0\6\1\2\0\6\1\2\0\6\1\2\0"+
//    "\3\1\43\0";

  /**
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = XmlOldFlexLexer.zzUnpackCMap(XmlOldFlexLexer.ZZ_CMAP_PACKED);

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = XmlOldFlexLexer.zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\7\0\1\2\1\3\1\4\1\5\1\2"+
    "\1\5\1\6\1\5\1\7\1\5\1\10\1\5\1\11"+
    "\1\1\1\12\1\1\1\13\3\14\1\15\1\16\1\17"+
    "\2\20\1\12\1\21\1\22\1\2\1\0\1\23\1\24"+
    "\6\0\1\6\1\0\1\25\1\10\1\26\1\11\2\1"+
    "\1\0\1\13\5\0\1\27\7\0\1\1\1\30\1\0"+
    "\1\31\1\32\2\0\1\33\12\0\1\34\1\35";
  public static int ZZ_CMAP_LENGTH;
  private int bufferStart = 0;

  public XmlOldFlexLexer() {
    //To change body of created methods use File | Settings | File Templates.
  }

  private static int [] zzUnpackAction() {
    int [] result = new int[93];
    int offset = 0;
    offset = XmlOldFlexLexer.zzUnpackAction(XmlOldFlexLexer.ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = XmlOldFlexLexer.zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\53\0\126\0\201\0\254\0\327\0\u0102\0\u012d"+
    "\0\u0158\0\u0183\0\u01ae\0\u01d9\0\u0204\0\u022f\0\u025a\0\u0285"+
    "\0\u02b0\0\u0204\0\u02db\0\u0306\0\u0204\0\u0331\0\u035c\0\u0387"+
    "\0\u03b2\0\u03dd\0\u0408\0\u0433\0\u045e\0\u0204\0\u0306\0\u0285"+
    "\0\u0204\0\u0204\0\u0204\0\u0204\0\u0306\0\u0285\0\u0204\0\u0204"+
    "\0\u0489\0\u04b4\0\u0204\0\u0204\0\u04df\0\u050a\0\u0535\0\u0560"+
    "\0\u058b\0\u05b6\0\u05e1\0\u060c\0\u0204\0\u0637\0\u0204\0\u0662"+
    "\0\u068d\0\u06b8\0\u06e3\0\u070e\0\u0739\0\u0764\0\u078f\0\u07ba"+
    "\0\u07e5\0\u0204\0\u0810\0\u083b\0\u0866\0\u0891\0\u08bc\0\u08e7"+
    "\0\u0912\0\u093d\0\u0204\0\u0968\0\u0204\0\u0204\0\u0993\0\u09be"+
    "\0\u0204\0\u09e9\0\u0a14\0\u0a3f\0\u0a6a\0\u0a95\0\u0ac0\0\u0aeb"+
    "\0\u0b16\0\u0b41\0\u0b6c\0\u0204\0\u0204";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[93];
    int offset = 0;
    offset = XmlOldFlexLexer.zzUnpackRowMap(XmlOldFlexLexer.ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = XmlOldFlexLexer.zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\3\15\1\16\3\15\1\17\10\15\1\20\30\15\1\21"+
    "\1\15\1\22\1\23\1\22\1\16\3\22\1\24\2\22"+
    "\4\23\1\22\1\25\1\20\2\23\1\22\11\23\1\22"+
    "\6\23\1\22\1\26\6\22\1\27\5\22\1\24\2\22"+
    "\4\27\2\22\1\20\2\27\1\22\11\27\1\22\6\27"+
    "\1\30\7\22\1\31\1\22\1\16\3\22\1\24\2\22"+
    "\4\31\1\22\1\25\1\20\2\31\1\22\11\31\1\22"+
    "\6\31\7\22\5\32\1\33\11\32\1\34\33\32\1\22"+
    "\1\35\1\22\1\16\3\22\1\24\2\22\4\35\2\22"+
    "\1\20\2\35\1\22\11\35\1\22\6\35\7\22\3\36"+
    "\1\16\3\36\1\37\10\36\1\40\25\36\1\41\1\42"+
    "\1\43\2\36\7\22\1\24\10\22\1\20\32\22\7\44"+
    "\1\45\10\44\1\46\27\44\1\47\11\44\1\45\10\44"+
    "\1\46\26\44\1\47\3\44\3\22\1\16\3\22\1\24"+
    "\7\22\1\50\1\20\32\22\16\15\1\51\34\15\56\0"+
    "\1\16\57\0\1\52\33\0\1\53\1\54\6\0\1\55"+
    "\10\0\4\55\3\0\1\56\1\55\1\0\1\57\3\55"+
    "\1\60\1\55\1\61\2\55\1\62\6\55\44\0\1\15"+
    "\14\0\1\15\1\0\2\23\1\0\2\23\1\63\3\0"+
    "\4\23\3\0\2\23\1\0\11\23\1\0\6\23\17\0"+
    "\1\64\61\0\1\65\34\0\2\27\1\0\2\27\1\66"+
    "\3\0\4\27\3\0\2\27\1\0\11\27\1\0\6\27"+
    "\26\0\1\67\34\0\2\31\1\0\2\31\1\70\3\0"+
    "\4\31\3\0\2\31\1\0\11\31\1\0\6\31\7\0"+
    "\5\32\1\71\11\32\1\34\40\32\1\72\11\32\1\34"+
    "\33\32\5\34\1\73\45\34\1\0\2\35\1\0\2\35"+
    "\1\74\3\0\4\35\3\0\2\35\1\0\11\35\1\0"+
    "\6\35\25\0\1\75\41\0\1\76\3\0\1\77\1\0"+
    "\1\100\40\0\2\55\1\0\2\55\1\101\3\0\4\55"+
    "\3\0\2\55\1\102\11\55\1\0\6\55\10\0\2\55"+
    "\1\0\2\55\1\101\3\0\4\55\3\0\1\55\1\103"+
    "\1\102\11\55\1\0\6\55\10\0\2\55\1\0\2\55"+
    "\1\101\3\0\4\55\3\0\2\55\1\102\1\55\1\104"+
    "\6\55\1\105\1\0\6\55\10\0\2\55\1\0\2\55"+
    "\1\101\3\0\4\55\3\0\2\55\1\102\5\55\1\106"+
    "\3\55\1\0\6\55\10\0\2\55\1\0\2\55\1\101"+
    "\3\0\4\55\3\0\2\55\1\102\7\55\1\107\1\55"+
    "\1\0\6\55\11\0\1\110\33\0\1\111\15\0\2\63"+
    "\1\0\2\63\4\0\4\63\3\0\2\63\1\0\11\63"+
    "\1\0\6\63\14\0\1\76\3\0\1\77\42\0\2\66"+
    "\1\0\2\66\4\0\4\66\3\0\2\66\1\0\11\66"+
    "\1\0\6\66\10\0\2\70\1\0\2\70\4\0\4\70"+
    "\3\0\2\70\1\0\11\70\1\0\6\70\7\0\5\32"+
    "\1\112\11\32\1\34\52\32\1\113\33\32\5\34\1\114"+
    "\45\34\1\0\2\74\1\0\2\74\4\0\4\74\3\0"+
    "\2\74\1\0\11\74\1\0\6\74\26\0\1\115\40\0"+
    "\1\116\57\0\1\117\100\0\1\120\13\0\2\101\1\0"+
    "\2\101\4\0\4\101\3\0\2\101\1\102\11\101\1\0"+
    "\6\101\10\0\2\55\1\0\2\55\1\101\3\0\4\55"+
    "\3\0\2\55\1\121\11\55\1\0\6\55\10\0\2\55"+
    "\1\0\2\55\1\101\3\0\4\55\3\0\2\55\1\102"+
    "\2\55\1\122\6\55\1\0\6\55\10\0\2\55\1\0"+
    "\2\55\1\101\3\0\4\55\3\0\2\55\1\102\1\55"+
    "\1\103\7\55\1\0\6\55\10\0\2\55\1\0\2\55"+
    "\1\101\3\0\4\55\3\0\2\55\1\102\2\55\1\56"+
    "\6\55\1\0\6\55\10\0\2\55\1\0\2\55\1\101"+
    "\3\0\4\55\3\0\2\55\1\102\3\55\1\105\5\55"+
    "\1\0\6\55\11\0\1\110\20\0\1\121\31\0\1\123"+
    "\7\0\3\123\7\0\1\123\6\0\1\123\3\0\1\123"+
    "\3\0\1\123\7\0\17\32\1\0\33\32\17\34\1\0"+
    "\33\34\13\0\1\124\51\0\1\125\41\0\2\55\1\0"+
    "\2\55\1\101\3\0\4\55\3\0\2\55\1\102\3\55"+
    "\1\103\5\55\1\0\6\55\11\0\1\123\7\0\3\123"+
    "\6\0\1\121\1\123\6\0\1\123\3\0\1\123\3\0"+
    "\1\123\23\0\1\126\53\0\1\127\52\0\1\130\76\0"+
    "\1\131\25\0\1\132\100\0\1\133\21\0\1\134\104\0"+
    "\1\135\7\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[2967];
    int offset = 0;
    offset = XmlOldFlexLexer.zzUnpackTrans(XmlOldFlexLexer.ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


 /* error codes */
 private static final int ZZ_UNKNOWN_ERROR = 0;
 private static final int ZZ_NO_MATCH = 1;
 private static final int ZZ_PUSHBACK_2BIG = 2;
 private static final int YYEOF = -1;
 private static java.io.Reader zzReader = null; // Fake

 /* error data for the codes above */
 private static final String ZZ_ERROR_MSG[] = {
   "Unkown internal scanner error",
   "Error: could not match input",
   "Error: pushback value was too large"
 };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = XmlOldFlexLexer.zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\1\7\0\1\11\4\1\1\11\2\1\1\11"+
    "\10\1\1\11\2\1\4\11\2\1\2\11\1\1\1\0"+
    "\2\11\6\0\1\1\1\0\1\11\1\1\1\11\3\1"+
    "\1\0\1\1\5\0\1\11\7\0\1\1\1\11\1\0"+
    "\2\11\2\0\1\11\12\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[93];
    int offset = 0;
    offset = XmlOldFlexLexer.zzUnpackAttribute(XmlOldFlexLexer.ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

 /** the current state of the DFA */
 private int zzState;

 /** the current lexical state */
 private int zzLexicalState = XmlOldFlexLexer.YYINITIAL;

 /** this buffer contains the current text to be matched and is
     the source of the yytext() string */
 private CharSequence zzBuffer = "";

 /** the textposition at the last accepting state */
 private int zzMarkedPos;

 /** the textposition at the last state to be included in yytext */
 private int zzPushbackPos;

 /** the current text position in the buffer */
 private int zzCurrentPos;

 /** startRead marks the beginning of the yytext() string in the buffer */
 private int zzStartRead;

 /** endRead marks the last character in the buffer, that has been read
     from input */
 private int zzEndRead;

 /**
  * zzAtBOL == true <=> the scanner is currently at the beginning of a line
  */
 private boolean zzAtBOL = true;

 /** zzAtEOF == true <=> the scanner is at the EOF */
 private boolean zzAtEOF;

  /* user code: */
 private int prevState = XmlOldFlexLexer.YYINITIAL;

 public int yyprevstate() {
   return prevState;
 }

 private int popState(){
   final int prev = prevState;
   prevState = XmlOldFlexLexer.YYINITIAL;
   return prev;
 }

 protected void pushState(int state){
   prevState = state;
 }


  public XmlOldFlexLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public XmlOldFlexLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /**
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    packed = packed.substring(0, 124);
    char [] map = new char[121];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    XmlOldFlexLexer.ZZ_CMAP_LENGTH = map.length;
    return map;
  }

 public int getTokenStart(){
   return zzStartRead;
 }

 public int getTokenEnd(){
   return getTokenStart() + (zzMarkedPos - zzStartRead);
 }

 public void reset(CharSequence buffer, int startOffset, int state){
   zzBuffer = buffer;
   zzCurrentPos = zzMarkedPos = zzStartRead = startOffset;
   zzEndRead = buffer.length();
   zzPushbackPos = 0;
   zzAtEOF  = false;
   zzAtBOL = true;
   yybegin(state);
 }

 /**
  * Refills the input buffer.
  *
  * @return      <code>false</code>, iff there was new input.
  *
  */
 private boolean zzRefill(){
   return true;
 }


 /**
  * Returns the current lexical state.
  */
 public final int yystate() {
   return zzLexicalState;
 }


 /**
  * Enters a new lexical state
  *
  * @param newState the new lexical state
  */
 public final void yybegin(int newState) {
   zzLexicalState = newState;
 }


 /**
  * Returns the text matched by the current regular expression.
  */
 public final CharSequence yytext() {
   return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
 }


 /**
  * Returns the character at position <tt>pos</tt> from the
  * matched text.
  *
  * It is equivalent to yytext().charAt(pos), but faster
  *
  * @param pos the position of the character to fetch.
  *            A value from 0 to yylength()-1.
  *
  * @return the character at position pos
  */
 public final char yycharat(int pos) {
   return zzBuffer.charAt(zzStartRead + pos);
 }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to screen
   */
   private void zzScanError(int errorCode) {
    String message;
    try {
      message = XmlOldFlexLexer.ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = XmlOldFlexLexer.ZZ_ERROR_MSG[XmlOldFlexLexer.ZZ_UNKNOWN_ERROR];
    }

     throw new Error(message);
  }


 /**
  * Pushes the specified amount of characters back into the input stream.
  *
  * They will be read again by then next call of the scanning method
  *
  * @param number  the number of characters to be read again.
  *                This number must not be greater than yylength()!
  */
  public void yypushback(int number)  {
   if ( number > zzMarkedPos - zzStartRead )
     zzScanError(XmlOldFlexLexer.ZZ_PUSHBACK_2BIG);

   zzMarkedPos -= number;
 }


  private static final int[] SMART_SITCH_EMULATION = new int[60];

 /**
  * Resumes scanning until the next regular expression is matched,
  * the end of input is encountered or an I/O-Error occurs.
  *
  * @return      the next token
  */
  public int advance(){
   int zzInput;
   int zzAction;

   // cached fields:
   int zzCurrentPosL;
   int zzMarkedPosL;
   int zzEndReadL = zzEndRead;

   final char[] zzCmap = XmlOldFlexLexer.ZZ_CMAP;
   int [] zzTransL = XmlOldFlexLexer.ZZ_TRANS;
   int [] zzRowMapL = XmlOldFlexLexer.ZZ_ROWMAP;
   int [] zzAttrL = XmlOldFlexLexer.ZZ_ATTRIBUTE;
   final int[] zzActions = XmlOldFlexLexer.ZZ_ACTION;


   while (true) {
     zzMarkedPosL = zzMarkedPos;

     zzAction = -1;

     zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

     zzState = zzLexicalState;

     zzForAction: {
       while (true) {
         if (zzCurrentPosL < zzEndReadL) {
           zzInput = zzBuffer.charAt(zzCurrentPosL++);
         }
         else {
           zzInput = XmlOldFlexLexer.YYEOF;
           break zzForAction;
         }
         final int i = zzRowMapL[zzState] + (zzInput < XmlOldFlexLexer.ZZ_CMAP_LENGTH ? zzCmap[zzInput] : 1);
         int zzNext = zzTransL[ i ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
           zzAction = zzState;
           zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
         }

       }
     }

     // store back cached position
     zzMarkedPos = zzMarkedPosL;

     switch (zzAction < 0 ? zzAction : zzActions[zzAction]) {
       case 16:
         { return XmlTokenType.ATTR_VAL;
         }
       case 30: break;
       case 10:
         { return XmlTokenType.BAD_CHAR;
         }
       case 31: break;
       case 25:
         { yybegin(XmlOldFlexLexer.YYINITIAL); return XmlTokenType.CDATA_END;
         }
       case 32: break;
       case 5:
         {
           if(yystate() == XmlOldFlexLexer.YYINITIAL){
             return XmlTokenType.BAD_CHAR;
           }
           else yybegin(popState());
           yypushback(zzMarkedPos - zzStartRead);
         }
       case 33: break;
       case 14:
         {
           yybegin(XmlOldFlexLexer.ATTR_VALUE_SQ); return XmlTokenType.ATTR_VAL_START;
         }
       case 34: break;
       case 27:
         {
           return XmlTokenType.CHAR_ENTITY;
         }
       case 35: break;
       case 4:
         { yybegin(XmlOldFlexLexer.TAG); return XmlTokenType.TAG_START;
         }
       case 36: break;
       case 20:
         { yybegin(XmlOldFlexLexer.END_TAG); return XmlTokenType.END_TAG_START;
         }
       case 37: break;
       case 6:
         { yybegin(XmlOldFlexLexer.ATTR_LIST); pushState(XmlOldFlexLexer.TAG); return XmlTokenType.NAME;
         }
       case 38: break;
       case 21:
         { yybegin(XmlOldFlexLexer.YYINITIAL); return XmlTokenType.EMPTY_TAG_END;
         }
       case 39: break;
       case 22:
         { yybegin(XmlOldFlexLexer.YYINITIAL); return XmlTokenType.PI_END;
         }
       case 40: break;
       case 23:
         { return XmlTokenType.ENTITY_REF;
         }
       case 41: break;
       case 26:
         { yybegin(XmlOldFlexLexer.COMMENT); return XmlTokenType.COMMENT;
         }
       case 42: break;
       case 28:
         { yybegin(XmlOldFlexLexer.CDATA); return XmlTokenType.CDATA_START;
         }
       case 43: break;
       case 1:
         { return XmlTokenType.COMMENT;
         }
       case 44: break;
       case 8:
         { yybegin(XmlOldFlexLexer.ATTR_LIST); pushState(XmlOldFlexLexer.PROCESSING_INSTRUCTION); return XmlTokenType.NAME;
         }
       case 45: break;
       case 18:
         { yybegin(XmlOldFlexLexer.YYINITIAL); return XmlTokenType.DOCTYPE_END;
         }
       case 46: break;
       case 13:
         { return XmlTokenType.EQ;
         }
       case 47: break;
       case 15:
         { yybegin(XmlOldFlexLexer.ATTR_VALUE_DQ); return XmlTokenType.ATTR_VAL_START;
         }
       case 48: break;
       case 12:
         { yybegin(XmlOldFlexLexer.ATTR_LIST);
           yypushback(zzMarkedPos - zzStartRead);
         }
       case 49: break;
       case 9:
         { return XmlTokenType.NAME;
         }
       case 50: break;
       case 7:
         { yybegin(XmlOldFlexLexer.YYINITIAL); return XmlTokenType.TAG_END;
         }
       case 51: break;
       case 24:
         { yybegin(XmlOldFlexLexer.YYINITIAL); return XmlTokenType.COMMENT;
         }
       case 52: break;
       case 11:
         { yybegin(XmlOldFlexLexer.ATTR); return XmlTokenType.NAME;
         }
       case 53: break;
       case 29:
         { yybegin(XmlOldFlexLexer.DOCTYPE); return XmlTokenType.DOCTYPE_START;
         }
       case 54: break;
       case 17:
         { yybegin(XmlOldFlexLexer.ATTR_LIST); return XmlTokenType.ATTR_VAL_END;
         }
       case 55: break;
       case 19:
         { yybegin(XmlOldFlexLexer.PROCESSING_INSTRUCTION); return XmlTokenType.PI_START;
         }
       case 56: break;
       case 3:
         { return XmlTokenType.WS;
         }
       case 57: break;
       case 2:
         { return XmlTokenType.DATA;
         }
       case 58: break;
      default:
        if (zzInput == XmlOldFlexLexer.YYEOF && zzStartRead == zzCurrentPos) {
          this.zzAtEOF = true;
           return XmlOldFlexLexer.YYEOF;
        }
        else {
           zzScanError(XmlOldFlexLexer.ZZ_NO_MATCH);
        }
    }
   }
 }

  public void reset(CharSequence sequence) {
    reset(sequence, 0, YYINITIAL);
  }
}
